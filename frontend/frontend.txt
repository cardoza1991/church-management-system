File: ./src/components/contacts/ContactForm.tsx
import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { contactsAPI, statusesAPI } from '@/lib/api';

export default function ContactForm({ contactId = null }) {
  const router = useRouter();
  const [contact, setContact] = useState({
    name: '',
    location: '',
    phone: '',
    email: '',
    notes: '',
    current_status_id: 1, // Default to "New Contact"
  });
  const [statuses, setStatuses] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [isEdit, setIsEdit] = useState(false);

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      try {
        // Fetch statuses
        const statusesRes = await statusesAPI.getStatuses();
        setStatuses(statusesRes.data.statuses);
        
        // If we have a contactId, fetch the contact data
        if (contactId) {
          setIsEdit(true);
          const contactRes = await contactsAPI.getContact(contactId);
          setContact(contactRes.data);
        }
      } catch (error) {
        setError('Failed to load data. Please try again.');
        console.error(error);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [contactId]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setContact(prev => ({
      ...prev,
      [name]: name === 'current_status_id' ? parseInt(value, 10) : value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      if (isEdit) {
        await contactsAPI.updateContact(contactId, contact);
      } else {
        await contactsAPI.createContact(contact);
      }
      router.push('/contacts');
    } catch (error) {
      setError('Failed to save contact. Please try again.');
      console.error(error);
    } finally {
      setLoading(false);
    }
  };

  if (loading && !contact.name) {
    return <div className="text-center py-4">Loading...</div>;
  }

  return (
    <form onSubmit={handleSubmit} className="bg-white shadow-md rounded-lg p-6">
      {error && (
        <div className="mb-4 p-3 bg-red-100 text-red-700 rounded">
          {error}
        </div>
      )}
      
      <div className="mb-4">
        <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="name">
          Name *
        </label>
        <input
          id="name"
          name="name"
          type="text"
          value={contact.name}
          onChange={handleChange}
          className="w-full px-3 py-2 border rounded shadow appearance-none"
          required
        />
      </div>

      <div className="mb-4">
        <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="location">
          Location
        </label>
        <input
          id="location"
          name="location"
          type="text"
          value={contact.location}
          onChange={handleChange}
          className="w-full px-3 py-2 border rounded shadow appearance-none"
        />
      </div>

      <div className="mb-4">
        <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="phone">
          Phone
        </label>
        <input
          id="phone"
          name="phone"
          type="tel"
          value={contact.phone}
          onChange={handleChange}
          className="w-full px-3 py-2 border rounded shadow appearance-none"
        />
      </div>

      <div className="mb-4">
        <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="email">
          Email
        </label>
        <input
          id="email"
          name="email"
          type="email"
          value={contact.email}
          onChange={handleChange}
          className="w-full px-3 py-2 border rounded shadow appearance-none"
        />
      </div>

      <div className="mb-4">
        <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="current_status_id">
          Status
        </label>
        <select
          id="current_status_id"
          name="current_status_id"
          value={contact.current_status_id}
          onChange={handleChange}
          className="w-full px-3 py-2 border rounded shadow appearance-none"
          required
        >
          {statuses.map(status => (
            <option key={status.id} value={status.id}>
              {status.name}
            </option>
          ))}
        </select>
      </div>

      <div className="mb-6">
        <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="notes">
          Notes
        </label>
        <textarea
          id="notes"
          name="notes"
          value={contact.notes}
          onChange={handleChange}
          className="w-full px-3 py-2 border rounded shadow appearance-none"
          rows={4}
        />
      </div>

      <div className="flex items-center justify-between">
        <button
          type="submit"
          className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
          disabled={loading}
        >
          {loading ? 'Saving...' : isEdit ? 'Update Contact' : 'Create Contact'}
        </button>
        <button
          type="button"
          className="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
          onClick={() => router.push('/contacts')}
        >
          Cancel
        </button>
      </div>
    </form>
  );
}
-e 
---

File: ./src/components/dashboard/Header.tsx
'use client';

import { useAuth } from '@/components/auth/AuthProvider';

export default function Header() {
  const { user, logout } = useAuth();

  return (
    <header className="bg-white shadow">
      <div className="container mx-auto py-4 px-6 flex justify-between items-center">
        <h1 className="text-xl font-semibold text-gray-800">Church Management System</h1>
        
        <div className="flex items-center space-x-4">
          {user && (
            <>
              <span className="text-gray-600">
                Welcome, {user.full_name}
              </span>
              <button
                onClick={logout}
                className="px-3 py-1 border border-gray-300 rounded hover:bg-gray-100"
              >
                Logout
              </button>
            </>
          )}
        </div>
      </div>
    </header>
  );
}-e 
---

File: ./src/components/dashboard/Sidebar.tsx
'use client';

import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { useAuth } from '@/components/auth/AuthProvider';

export default function Sidebar() {
  const pathname = usePathname();
  const { user } = useAuth();

  // Define navigation items
  const navigation = [
    { name: 'Dashboard', href: '/dashboard', icon: 'üìä' },
    { name: 'Contacts', href: '/contacts', icon: 'üë•' },
    { name: 'Bible Studies', href: '/studies', icon: 'üìö' },
    { name: 'Rooms', href: '/rooms', icon: 'üè¢' },
  ];
  
  // Admin-only navigation items
  const adminNavigation = [
    { name: 'Users', href: '/users', icon: 'üë§' },
    { name: 'Settings', href: '/settings', icon: '‚öôÔ∏è' },
  ];

  return (
    <div className="w-64 bg-gray-800 text-white">
      <div className="p-6">
        <h2 className="text-xl font-bold">Fruit Management</h2>
      </div>
      
      <nav className="mt-5">
        <div className="px-4 py-2 text-xs text-gray-400 uppercase">
          Main
        </div>
        
        <ul>
          {navigation.map((item) => (
            <li key={item.name}>
              <Link
                href={item.href}
                className={\`flex items-center px-6 py-3 \${
                  pathname?.startsWith(item.href)
                    ? 'bg-gray-900 text-white'
                    : 'text-gray-300 hover:bg-gray-700'
                }\`}
              >
                <span className="mr-3">{item.icon}</span>
                {item.name}
              </Link>
            </li>
          ))}
        </ul>
        
        {user?.role === 'admin' && (
          <>
            <div className="px-4 py-2 mt-5 text-xs text-gray-400 uppercase">
              Administration
            </div>
            <ul>
              {adminNavigation.map((item) => (
                <li key={item.name}>
                  <Link
                    href={item.href}
                    className={\`flex items-center px-6 py-3 \${
                      pathname?.startsWith(item.href)
                        ? 'bg-gray-900 text-white'
                        : 'text-gray-300 hover:bg-gray-700'
                    }\`}
                  >
                    <span className="mr-3">{item.icon}</span>
                    {item.name}
                  </Link>
                </li>
              ))}
            </ul>
          </>
        )}
      </nav>
    </div>
  );
}-e 
---

File: ./src/components/auth/AuthProvider.tsx
'use client';

import React, { createContext, useContext, useEffect, useState } from 'react';
import { useRouter, usePathname } from 'next/navigation';
import { authAPI } from '@/lib/api';

interface User {
  id: number;
  username: string;
  role: string;
  full_name: string;
  email: string;
}

interface AuthContextType {
  user: User | null;
  loading: boolean;
  logout: () => void;
}

const AuthContext = createContext<AuthContextType>({
  user: null,
  loading: true,
  logout: () => {},
});

export const useAuth = () => useContext(AuthContext);

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const router = useRouter();
  const pathname = usePathname();

  const logout = () => {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    setUser(null);
    router.push('/login');
  };

  useEffect(() => {
    // Check if user is saved in localStorage
    const savedUser = localStorage.getItem('user');
    const token = localStorage.getItem('token');

    if (savedUser && token) {
      setUser(JSON.parse(savedUser));
      setLoading(false);
    } else {
      setLoading(false);
      if (!pathname?.includes('/login')) {
        router.push('/login');
      }
    }
  }, [pathname, router]);

  useEffect(() => {
    // Fetch current user data if we have a token
    const token = localStorage.getItem('token');
    if (token) {
      authAPI.getCurrentUser()
        .then(response => {
          setUser(response.data);
          localStorage.setItem('user', JSON.stringify(response.data));
        })
        .catch(() => {
          // If the token is invalid, log out
          logout();
        });
    }
  }, []);

  return (
    <AuthContext.Provider value={{ user, loading, logout }}>
      {children}
    </AuthContext.Provider>
  );
}
-e 
---

File: ./src/app/page.tsx
import Link from 'next/link'

export default function Home() {
  return (
    <div className="min-h-screen bg-gradient-to-b from-blue-900 to-blue-700 text-white">
      <div className="container mx-auto px-4 py-16">
        <header className="flex justify-between items-center mb-16">
          <h1 className="text-2xl font-bold">Church Management System</h1>
          <nav>
            <Link 
              href="/login" 
              className="px-4 py-2 bg-white text-blue-900 rounded-lg hover:bg-blue-100 transition-colors"
            >
              Login
            </Link>
          </nav>
        </header>
        
        <main className="max-w-4xl mx-auto text-center">
          <h2 className="text-5xl font-bold mb-6">Fruit Management System</h2>
          <p className="text-xl mb-12 text-blue-100">
            Track your ministry's growth with our comprehensive contact management system.
            Monitor Bible studies, spiritual progression, and manage room reservations all in one place.
          </p>
          
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Link 
              href="/login" 
              className="px-8 py-4 bg-white text-blue-900 font-bold rounded-lg hover:bg-blue-100 transition-colors"
            >
              Get Started
            </Link>
            <Link 
              href="/register" 
              className="px-8 py-4 border-2 border-white rounded-lg hover:bg-blue-800 transition-colors"
            >
              Create Account
            </Link>
          </div>
          
          <div className="mt-24 grid grid-cols-1 md:grid-cols-3 gap-8">
            <div className="bg-blue-800 p-6 rounded-lg">
              <div className="text-3xl mb-4">üë•</div>
              <h3 className="text-xl font-bold mb-2">Contact Management</h3>
              <p>Track spiritual growth from first contact to gospel worker.</p>
            </div>
            
            <div className="bg-blue-800 p-6 rounded-lg">
              <div className="text-3xl mb-4">üìö</div>
              <h3 className="text-xl font-bold mb-2">Bible Studies</h3>
              <p>Record and monitor the 30 studies needed for gospel worker status.</p>
            </div>
            
            <div className="bg-blue-800 p-6 rounded-lg">
              <div className="text-3xl mb-4">üè¢</div>
              <h3 className="text-xl font-bold mb-2">Room Reservations</h3>
              <p>Easily book and manage spaces for meetings and studies.</p>
            </div>
          </div>
        </main>
        
        <footer className="mt-24 text-center text-blue-200">
          <p>&copy; {new Date().getFullYear()} Church Management System</p>
        </footer>
      </div>
    </div>
  )
}
-e 
---

File: ./src/app/(dashboard)/layout.tsx
import React from 'react';
import Sidebar from '@/components/dashboard/Sidebar';
import Header from '@/components/dashboard/Header';
import { AuthProvider } from '@/components/auth/AuthProvider';

export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <AuthProvider>
      <div className="flex h-screen bg-gray-100">
        <Sidebar />
        <div className="flex flex-col flex-1 overflow-hidden">
          <Header />
          <main className="flex-1 overflow-y-auto p-4 bg-gray-50">
            <div className="container mx-auto">{children}</div>
          </main>
        </div>
      </div>
    </AuthProvider>
  );
}-e 
---

File: ./src/app/(dashboard)/contacts/page.tsx
'use client';

import React, { useEffect, useState } from 'react';
import Link from 'next/link';
import { contactsAPI, statusesAPI } from '@/lib/api';

export default function ContactsPage() {
  const [contacts, setContacts] = useState([]);
  const [statuses, setStatuses] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [contactsRes, statusesRes] = await Promise.all([
          contactsAPI.getContacts(),
          statusesAPI.getStatuses(),
        ]);
        
        setContacts(contactsRes.data.contacts);
        setStatuses(statusesRes.data.statuses);
      } catch (error) {
        console.error('Failed to fetch contacts', error);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  const getStatusName = (statusId) => {
    const status = statuses.find(s => s.id === statusId);
    return status ? status.name : 'Unknown';
  };
  
  const getStatusColor = (statusId) => {
    const status = getStatusName(statusId);
    switch (status) {
      case 'New Contact':
        return 'bg-blue-100 text-blue-800';
      case 'In Studies':
        return 'bg-yellow-100 text-yellow-800';
      case 'Baptized':
        return 'bg-purple-100 text-purple-800';
      case 'Gospel Worker':
        return 'bg-green-100 text-green-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold">Contacts</h1>
        <Link 
          href="/contacts/new" 
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
        >
          Add New Contact
        </Link>
      </div>
      
      {loading ? (
        <div className="text-center">Loading contacts...</div>
      ) : (
        <div className="bg-white shadow-md rounded-lg overflow-hidden">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Name
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Status
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Phone
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Added
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {contacts.map((contact) => (
                <tr key={contact.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm font-medium text-gray-900">
                      {contact.name}
                    </div>
                    <div className="text-sm text-gray-500">
                      {contact.email}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={\`px-2 py-1 text-xs font-semibold rounded-full \${getStatusColor(contact.current_status_id)}\`}>
                      {getStatusName(contact.current_status_id)}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {contact.phone || '‚Äî'}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {new Date(contact.date_added).toLocaleDateString()}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <Link 
                      href={\`/contacts/\${contact.id}\`}
                      className="text-blue-600 hover:text-blue-900 mr-3"
                    >
                      View
                    </Link>
                    <Link 
                      href={\`/contacts/\${contact.id}/edit\`}
                      className="text-green-600 hover:text-green-900"
                    >
                      Edit
                    </Link>
                  </td>
                </tr>
              ))}
              
              {contacts.length === 0 && (
                <tr>
                  <td colSpan={5} className="px-6 py-4 text-center text-sm text-gray-500">
                    No contacts found. Click "Add New Contact" to get started.
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
}-e 
---

File: ./src/app/(dashboard)/contacts/new/page.tsx
'use client';

import ContactForm from '@/components/contacts/ContactForm';

export default function NewContactPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Add New Contact</h1>
      <ContactForm />
    </div>
  );
}-e 
---

File: ./src/app/(dashboard)/contacts/[id]/page.tsx
'use client';

import React, { useEffect, useState } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { contactsAPI, statusesAPI } from '@/lib/api';

export default function ViewContactPage({ params }) {
  const router = useRouter();
  const contactId = parseInt(params.id, 10);
  const [contact, setContact] = useState(null);
  const [statuses, setStatuses] = useState([]);
  const [statusHistory, setStatusHistory] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      try {
        const [contactRes, statusesRes, historyRes] = await Promise.all([
          contactsAPI.getContact(contactId),
          statusesAPI.getStatuses(),
          contactsAPI.getContactStatusHistory(contactId),
        ]);
        
        setContact(contactRes.data);
        setStatuses(statusesRes.data.statuses);
        setStatusHistory(historyRes.data.history || []);
      } catch (error) {
        console.error('Failed to fetch contact data', error);
        setError('Failed to load contact. Please try again.');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [contactId]);

  const getStatusName = (statusId) => {
    const status = statuses.find(s => s.id === statusId);
    return status ? status.name : 'Unknown';
  };

  if (loading) {
    return <div className="text-center py-4">Loading contact information...</div>;
  }

  if (error || !contact) {
    return (
      <div className="bg-red-100 text-red-700 p-4 rounded">
        {error || 'Contact not found'}
        <button 
          onClick={() => router.push('/contacts')}
          className="mt-2 bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700"
        >
          Back to Contacts
        </button>
      </div>
    );
  }

  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold">{contact.name}</h1>
        <div className="space-x-3">
          <Link 
            href={'/contacts/' + contactId + '/edit'} 
            className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
          >
            Edit Contact
          </Link>
          <Link 
            href="/contacts" 
            className="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700"
          >
            Back to List
          </Link>
        </div>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="md:col-span-2">
          <div className="bg-white shadow-md rounded-lg overflow-hidden mb-6">
            <div className="p-6">
              <h2 className="text-xl font-semibold mb-4">Contact Information</h2>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <p className="text-sm text-gray-500">Status</p>
                  <p className="font-medium">{getStatusName(contact.current_status_id)}</p>
                </div>
                <div>
                  <p className="text-sm text-gray-500">Added On</p>
                  <p className="font-medium">{new Date(contact.date_added).toLocaleDateString()}</p>
                </div>
                <div>
                  <p className="text-sm text-gray-500">Email</p>
                  <p className="font-medium">{contact.email || '‚Äî'}</p>
                </div>
                <div>
                  <p className="text-sm text-gray-500">Phone</p>
                  <p className="font-medium">{contact.phone || '‚Äî'}</p>
                </div>
                <div>
                  <p className="text-sm text-gray-500">Location</p>
                  <p className="font-medium">{contact.location || '‚Äî'}</p>
                </div>
              </div>
              
              {contact.notes && (
                <div className="mt-4">
                  <p className="text-sm text-gray-500">Notes</p>
                  <p className="mt-1 whitespace-pre-line">{contact.notes}</p>
                </div>
              )}
            </div>
          </div>
          
          <div className="bg-white shadow-md rounded-lg overflow-hidden">
            <div className="p-6">
              <h2 className="text-xl font-semibold mb-4">Bible Studies</h2>
              <p className="text-gray-500">No Bible studies recorded yet.</p>
              <button className="mt-4 bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700">
                Add Bible Study Session
              </button>
            </div>
          </div>
        </div>
        
        <div>
          <div className="bg-white shadow-md rounded-lg overflow-hidden">
            <div className="p-6">
              <h2 className="text-xl font-semibold mb-4">Status History</h2>
              {statusHistory.length > 0 ? (
                <div className="space-y-4">
                  {statusHistory.map((change) => (
                    <div key={change.id} className="border-l-4 border-blue-500 pl-4 py-1">
                      <p className="font-medium">{change.status_name}</p>
                      <p className="text-sm text-gray-500">
                        {new Date(change.date_changed).toLocaleString()}
                      </p>
                      {change.notes && (
                        <p className="text-sm mt-1">{change.notes}</p>
                      )}
                    </div>
                  ))}
                </div>
              ) : (
                <p className="text-gray-500">No status changes recorded yet.</p>
              )}
              
              <div className="mt-6">
                <h3 className="font-semibold mb-2">Update Status</h3>
                <select 
                  className="w-full p-2 border rounded mb-2"
                  defaultValue={contact.current_status_id}
                >
                  {statuses.map(status => (
                    <option key={status.id} value={status.id}>
                      {status.name}
                    </option>
                  ))}
                </select>
                <textarea
                  className="w-full p-2 border rounded mb-2"
                  placeholder="Notes about this status change"
                  rows={2}
                />
                <button className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
                  Update Status
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}-e 
---

File: ./src/app/(dashboard)/dashboard/page.tsx
'use client';

import React, { useEffect, useState } from 'react';
import { contactsAPI, statusesAPI } from '@/lib/api';
import { useAuth } from '@/components/auth/AuthProvider';

export default function Dashboard() {
  const { user } = useAuth();
  const [stats, setStats] = useState({
    totalContacts: 0,
    newContacts: 0,
    inStudies: 0,
    baptized: 0,
    gospelWorkers: 0,
  });
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchData = async () => {
      try {
        // Fetch contacts and statuses
        const [contactsRes, statusesRes] = await Promise.all([
          contactsAPI.getContacts(100, 0),
          statusesAPI.getStatuses(),
        ]);

        const contacts = contactsRes.data.contacts;
        const statuses = statusesRes.data.statuses;
        
        // Find status IDs for each category
        const newStatusId = statuses.find(s => s.name === 'New Contact')?.id;
        const inStudiesId = statuses.find(s => s.name === 'In Studies')?.id;
        const baptizedId = statuses.find(s => s.name === 'Baptized')?.id;
        const gospelWorkerId = statuses.find(s => s.name === 'Gospel Worker')?.id;
        
        // Count contacts in each category
        setStats({
          totalContacts: contacts.length,
          newContacts: contacts.filter(c => c.current_status_id === newStatusId).length,
          inStudies: contacts.filter(c => c.current_status_id === inStudiesId).length,
          baptized: contacts.filter(c => c.current_status_id === baptizedId).length,
          gospelWorkers: contacts.filter(c => c.current_status_id === gospelWorkerId).length,
        });
      } catch (error) {
        console.error('Failed to fetch dashboard data', error);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  return (
    <div>
      <h1 className="text-3xl font-bold mb-8">Dashboard</h1>
      
      {loading ? (
        <div className="text-center">Loading dashboard data...</div>
      ) : (
        <>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4 mb-8">
            <StatCard title="Total Contacts" value={stats.totalContacts} color="bg-blue-500" />
            <StatCard title="New Contacts" value={stats.newContacts} color="bg-green-500" />
            <StatCard title="In Bible Studies" value={stats.inStudies} color="bg-yellow-500" />
            <StatCard title="Baptized" value={stats.baptized} color="bg-purple-500" />
            <StatCard title="Gospel Workers" value={stats.gospelWorkers} color="bg-red-500" />
          </div>

          <div className="bg-white shadow rounded-lg p-6">
            <h2 className="text-xl font-semibold mb-4">Welcome, {user?.full_name}</h2>
            <p className="text-gray-600">
              This dashboard provides an overview of the church contacts and their spiritual journey.
              Use the navigation menu to manage contacts, Bible studies, and room reservations.
            </p>
          </div>
        </>
      )}
    </div>
  );
}

function StatCard({ title, value, color }: { title: string; value: number; color: string }) {
  return (
    <div className="bg-white shadow rounded-lg overflow-hidden">
      <div className={\`\${color} h-2\`}></div>
      <div className="p-4">
        <h3 className="text-gray-500 text-sm">{title}</h3>
        <p className="text-2xl font-bold">{value}</p>
      </div>
    </div>
  );
}-e 
---

File: ./src/app/layout.tsx
import './globals.css'
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: 'Church Management System',
  description: 'Track contacts, Bible studies, and room reservations',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  )
}
-e 
---

File: ./src/app/globals.css
@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}
-e 
---

File: ./src/app/(auth)/login/page.tsx
'use client';

import React, { useState } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { authAPI } from '@/lib/api';

export default function LoginPage() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const router = useRouter();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setLoading(true);

    try {
      const response = await authAPI.login(username, password);
      localStorage.setItem('token', response.data.token);
      localStorage.setItem('user', JSON.stringify(response.data.user));
      router.push('/dashboard');
    } catch (err: any) {
      setError(err.response?.data || 'An error occurred during login');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="bg-white p-8 rounded-lg shadow-md w-full max-w-md">
        <h1 className="text-2xl font-bold mb-6 text-center">Church Management System</h1>
        
        {error && (
          <div className="mb-4 p-3 bg-red-100 text-red-700 rounded">
            {error}
          </div>
        )}
        
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label className="block text-gray-700 mb-2" htmlFor="username">
              Username
            </label>
            <input
              id="username"
              type="text"
              className="w-full p-2 border rounded"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              required
            />
          </div>
          
          <div className="mb-6">
            <label className="block text-gray-700 mb-2" htmlFor="password">
              Password
            </label>
            <input
              id="password"
              type="password"
              className="w-full p-2 border rounded"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
          </div>
          
          <button
            type="submit"
            className="w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700 disabled:bg-blue-300"
            disabled={loading}
          >
            {loading ? 'Logging in...' : 'Log In'}
          </button>
          
          <div className="mt-4 text-center">
            <p className="text-gray-600">
              Don't have an account?{' '}
              <Link href="/register" className="text-blue-600 hover:underline">
                Register
              </Link>
            </p>
          </div>
          
          <div className="mt-6 text-center">
            <Link href="/" className="text-gray-500 hover:underline">
              Back to Home
            </Link>
          </div>
        </form>
      </div>
    </div>
  );
}-e 
---

File: ./src/app/(auth)/register/page.tsx
'use client';

import React, { useState } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { authAPI } from '@/lib/api';

export default function RegisterPage() {
  const [formData, setFormData] = useState({
    username: '',
    password: '',
    confirmPassword: '',
    email: '',
    full_name: '',
    role: 'member', // Default role
  });
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const router = useRouter();

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    
    // Basic validation
    if (formData.password !== formData.confirmPassword) {
      setError('Passwords do not match');
      return;
    }
    
    setLoading(true);
    
    try {
      // Remove confirmPassword before sending to API
      const { confirmPassword, ...userData } = formData;
      
      const response = await authAPI.register(userData);
      
      // Store token and user data
      localStorage.setItem('token', response.data.token);
      localStorage.setItem('user', JSON.stringify(response.data.user));
      
      // Redirect to dashboard
      router.push('/dashboard');
    } catch (err) {
      setError(err.response?.data || 'An error occurred during registration');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="bg-white p-8 rounded-lg shadow-md w-full max-w-md">
        <h1 className="text-2xl font-bold mb-6 text-center">Create Account</h1>
        
        {error && (
          <div className="mb-4 p-3 bg-red-100 text-red-700 rounded">
            {error}
          </div>
        )}
        
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label className="block text-gray-700 mb-2" htmlFor="full_name">
              Full Name
            </label>
            <input
              id="full_name"
              name="full_name"
              type="text"
              className="w-full p-2 border rounded"
              value={formData.full_name}
              onChange={handleChange}
              required
            />
          </div>
          
          <div className="mb-4">
            <label className="block text-gray-700 mb-2" htmlFor="email">
              Email
            </label>
            <input
              id="email"
              name="email"
              type="email"
              className="w-full p-2 border rounded"
              value={formData.email}
              onChange={handleChange}
              required
            />
          </div>
          
          <div className="mb-4">
            <label className="block text-gray-700 mb-2" htmlFor="username">
              Username
            </label>
            <input
              id="username"
              name="username"
              type="text"
              className="w-full p-2 border rounded"
              value={formData.username}
              onChange={handleChange}
              required
            />
          </div>
          
          <div className="mb-4">
            <label className="block text-gray-700 mb-2" htmlFor="password">
              Password
            </label>
            <input
              id="password"
              name="password"
              type="password"
              className="w-full p-2 border rounded"
              value={formData.password}
              onChange={handleChange}
              required
              minLength={8}
            />
          </div>
          
          <div className="mb-6">
            <label className="block text-gray-700 mb-2" htmlFor="confirmPassword">
              Confirm Password
            </label>
            <input
              id="confirmPassword"
              name="confirmPassword"
              type="password"
              className="w-full p-2 border rounded"
              value={formData.confirmPassword}
              onChange={handleChange}
              required
              minLength={8}
            />
          </div>
          
          <button
            type="submit"
            className="w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700 disabled:bg-blue-300"
            disabled={loading}
          >
            {loading ? 'Creating Account...' : 'Register'}
          </button>
          
          <div className="mt-4 text-center">
            <p className="text-gray-600">
              Already have an account?{' '}
              <Link href="/login" className="text-blue-600 hover:underline">
                Log In
              </Link>
            </p>
          </div>
        </form>
      </div>
    </div>
  );
}-e 
---

File: ./src/lib/api/index.ts
import axios from 'axios';

const baseURL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080';

const api = axios.create({
  baseURL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Add a request interceptor to include the auth token
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// Add a response interceptor to handle token expiration
api.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response && error.response.status === 401) {
      // Redirect to login page if unauthorized
      localStorage.removeItem('token');
      window.location.href = '/login';
    }
    return Promise.reject(error);
  }
);

export default api;

// Auth API
export const authAPI = {
  login: (username: string, password: string) =>
    api.post('/login', { username, password }),
  register: (userData: any) =>
    api.post('/register', userData),
  getCurrentUser: () =>
    api.get('/users/me'),
};

// Contacts API
export const contactsAPI = {
  getContacts: (limit = 20, offset = 0) =>
    api.get(`/contacts?limit=${limit}&offset=${offset}`),
  getContact: (id: number) =>
    api.get(`/contacts/${id}`),
  createContact: (contactData: any) =>
    api.post('/contacts', contactData),
  updateContact: (id: number, contactData: any) =>
    api.put(`/contacts/${id}`, contactData),
  updateContactStatus: (id: number, statusId: number, notes: string = '') =>
    api.put(`/contacts/${id}/status`, { status_id: statusId, notes }),
  getContactStatusHistory: (id: number) =>
    api.get(`/contacts/${id}/status-history`),
};

// Statuses API
export const statusesAPI = {
  getStatuses: () =>
    api.get('/statuses'),
  getStatus: (id: number) =>
    api.get(`/statuses/${id}`),
};

// Rooms API
export const roomsAPI = {
  getRooms: () =>
    api.get('/rooms'),
  getRoom: (id: number) =>
    api.get(`/rooms/${id}`),
  createReservation: (reservationData: any) =>
    api.post('/reservations', reservationData),
  getReservations: (roomId?: number, date?: string) => {
    let url = '/reservations';
    if (roomId) {
      url += `?room_id=${roomId}`;
      if (date) {
        url += `&date=${date}`;
      }
    } else if (date) {
      url += `?date=${date}`;
    }
    return api.get(url);
  },
};-e 
---

